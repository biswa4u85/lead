generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  company       String?
  firstName     String
  lastName      String
  email         String    @unique
  phone         String?
  emailVerified DateTime?
  password      String?
  image         String?
  postalCode    String?
  sponsorCode   String?
  wallet        Int?      @default(0)
  status        String    @default("active")
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  payments      Payment[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  provider          String
  providerAccountId String
  type              String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model BatimentCategory {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  icon          String?
  batimentTypes BatimentType[]
  batiments     Batiment[]
}

model BatimentType {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  icon               String
  batimentCategoryId String
  batimentCategory   BatimentCategory @relation(fields: [batimentCategoryId], references: [id], onDelete: Cascade)
  batiments          Batiment[]
}

model Batiment {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  description        String
  address            BatimentAddress?
  status             String           @default("active")
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  batimentCategoryId String
  batimentCategory   BatimentCategory @relation(fields: [batimentCategoryId], references: [id], onDelete: Cascade)
  batimentTypeId     String
  batimentType       BatimentType     @relation(fields: [batimentTypeId], references: [id], onDelete: Cascade)
}

model BatimentAddress {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  company    String?
  firstName  String
  lastName   String
  postalCode String
  phone      String
  email      String
  city       String
  batimentId String   @unique
  batiment   Batiment @relation(fields: [batimentId], references: [id], onDelete: Cascade)
}

model DepannageCategory {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       String?
  icon        String?
  depannages  Depannage[]
  parentId    String?             @default("0")
  parent      DepannageCategory?  @relation("ChildToParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    DepannageCategory[] @relation("ChildToParent")
}

model Depannage {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  title               String
  description         String
  address             DepannageAddress?
  status              String            @default("active")
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  depannageCategoryId String
  depannageCategory   DepannageCategory @relation(fields: [depannageCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model DepannageAddress {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  company     String?
  firstName   String
  lastName    String
  postalCode  String
  phone       String
  email       String
  city        String
  depannageId String    @unique
  depannage   Depannage @relation(fields: [depannageId], references: [id], onDelete: Cascade )
}

model ZipCode {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  code String
}

model Payment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  type      String   @default("card")
  refId     String?
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction)
}
